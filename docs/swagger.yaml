basePath: /
definitions:
  models.ErrorResponse:
    properties:
      message:
        type: string
      status:
        type: string
    type: object
  models.Role:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  models.SuccessResponse:
    properties:
      data: {}
      message:
        type: string
      status:
        type: string
    type: object
  models.Transaction:
    properties:
      created_AT:
        type: string
      id:
        type: integer
      pay_DATE:
        type: string
      product_ID:
        type: integer
      status:
        type: integer
      total:
        type: integer
      trx_ID:
        type: string
      updated_AT:
        type: string
      user_ID:
        type: integer
    type: object
  models.User:
    properties:
      email:
        type: string
      id:
        type: integer
      password:
        type: string
      role:
        $ref: '#/definitions/models.Role'
      roleID:
        type: integer
      username:
        type: string
    type: object
  services.ChangePasswordInput:
    properties:
      new_password:
        type: string
      old_password:
        type: string
    type: object
  services.LoginInput:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  services.RegisterInput:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
info:
  contact: {}
paths:
  /auth/change-password:
    post:
      consumes:
      - application/json
      description: Change the password for the currently authenticated user
      parameters:
      - description: Change password input
        in: body
        name: changePasswordInput
        required: true
        schema:
          $ref: '#/definitions/services.ChangePasswordInput'
      produces:
      - application/json
      responses:
        "200":
          description: Password changed successfully
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Change user password
      tags:
      - auth
  /auth/me:
    get:
      description: Retrieve user data for the currently authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: User data retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/models.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user data
      tags:
      - auth
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return a token
      parameters:
      - description: Login input
        in: body
        name: loginInput
        required: true
        schema:
          $ref: '#/definitions/services.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            allOf:
            - $ref: '#/definitions/models.SuccessResponse'
            - properties:
                data:
                  properties:
                    token:
                      type: string
                    user:
                      $ref: '#/definitions/models.User'
                  type: object
              type: object
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Login a user
      tags:
      - auth
  /register:
    post:
      consumes:
      - application/json
      description: Register a new user with username, password, and email
      parameters:
      - description: Registration input
        in: body
        name: registerInput
        required: true
        schema:
          $ref: '#/definitions/services.RegisterInput'
      produces:
      - application/json
      responses:
        "200":
          description: User registered successfully
          schema:
            allOf:
            - $ref: '#/definitions/models.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Register a new user
      tags:
      - auth
  /transactions:
    post:
      consumes:
      - application/json
      description: create a new transaction
      parameters:
      - description: Create Transaction
        in: body
        name: transaction
        required: true
        schema:
          $ref: '#/definitions/models.Transaction'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create a transaction
      tags:
      - transactions
  /transactions/{id}:
    delete:
      consumes:
      - application/json
      description: delete a transaction by ID
      parameters:
      - description: Transaction ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Delete a transaction
      tags:
      - transactions
    get:
      consumes:
      - application/json
      description: get transaction by ID
      parameters:
      - description: Transaction ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Retrieve a transaction
      tags:
      - transactions
    put:
      consumes:
      - application/json
      description: update a transaction by ID
      parameters:
      - description: Transaction ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Transaction
        in: body
        name: transaction
        required: true
        schema:
          $ref: '#/definitions/models.Transaction'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update a transaction
      tags:
      - transactions
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
